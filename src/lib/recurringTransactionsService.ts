import { supabase } from "./supabaseClient";
import { RecurringTransaction } from "@/types/transaction";

// Type for creating a new recurring transaction, omitting fields generated by the DB
export type NewRecurringTransaction = Omit<
  RecurringTransaction,
  "id" | "user_id" | "created_at" | "updated_at" | "execution_count" | "status"
>;

/**
 * Creates a new recurring transaction definition in the database.
 * @param definition - The recurring transaction details.
 * @returns The created recurring transaction data.
 */
export async function createRecurringTransaction(
  definition: NewRecurringTransaction
): Promise<RecurringTransaction> {
  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser();

  if (userError || !user) {
    console.error("Error getting user:", userError);
    throw new Error("User not found");
  }

  const { data, error } = await supabase
    .from("recurring_transactions")
    .insert([
      {
        ...definition,
        user_id: user.id,
      },
    ])
    .select()
    .single(); // .single() assumes we insert one record and want it back

  if (error) {
    console.error("Error creating recurring transaction:", error);
    throw error;
  }

  return data;
}

/**
 * Fetches all recurring transactions for the currently authenticated user.
 * @returns An array of recurring transactions.
 */
export async function getRecurringTransactions(): Promise<
  RecurringTransaction[]
> {
  const { data, error } = await supabase
    .from("recurring_transactions")
    .select("*");

  if (error) {
    console.error("Error fetching recurring transactions:", error);
    throw error;
  }

  return data || [];
}
